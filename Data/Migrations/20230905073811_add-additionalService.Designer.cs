// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230905073811_add-additionalService")]
    partial class addadditionalService
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.AdditionalService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerDay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecialNumber")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AdditionalServices");
                });

            modelBuilder.Entity("Core.Entities.AdditionalServiceInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InputTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AdditionalServiceInputs");
                });

            modelBuilder.Entity("Core.Entities.AdditionalServiceInputLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdditionalServiceInputID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalServiceInputID");

                    b.ToTable("AdditionalServiceInputLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.AdditionalServiceLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdditionalServiceID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalServiceID");

                    b.ToTable("AdditionalServiceLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.AdditionalServiceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdditionalServiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalServiceID");

                    b.ToTable("AdditionalServiceOptions");
                });

            modelBuilder.Entity("Core.Entities.AdditionalServiceOptionLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdditionalServiceOptionID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalServiceOptionID");

                    b.ToTable("AdditionalServiceOptionLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.AdditionalServiceOptionPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdditionalServiceOptionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PersonPolicyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalServiceOptionID");

                    b.HasIndex("PersonPolicyID");

                    b.ToTable("AdditionalServiceOptionPrices");
                });

            modelBuilder.Entity("Core.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BannerImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BlogCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogCategoryID");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("Core.Entities.BlogCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BlogCategory");
                });

            modelBuilder.Entity("Core.Entities.BlogCategoryLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlogCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LangaugeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogCategoryID");

                    b.HasIndex("LangaugeID");

                    b.ToTable("BlogCategoryLanguageItem");
                });

            modelBuilder.Entity("Core.Entities.BlogLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlogID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlogTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LangaugeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogID");

                    b.HasIndex("LangaugeID");

                    b.ToTable("BlogLanguageItem");
                });

            modelBuilder.Entity("Core.Entities.CancellationPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UncancellableHours")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CancellationPolicies");
                });

            modelBuilder.Entity("Core.Entities.CancellationPolicyLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CancellationPolicyID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LangaugeID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CancellationPolicyID");

                    b.ToTable("CancellationPolicyLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.ChildPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromAge")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("ToAge")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ChildPolicies");
                });

            modelBuilder.Entity("Core.Entities.ConstantValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ConstantValues");
                });

            modelBuilder.Entity("Core.Entities.ConstantValueLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConstantValueID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConstantValueID");

                    b.ToTable("ConstantValueLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("ShowOnCustomMade")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("Core.Entities.DestinationLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DestinationID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LangaugeID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DestinationID");

                    b.ToTable("DestinationLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.Faq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FaqCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FaqCategoryID");

                    b.ToTable("Faqs");
                });

            modelBuilder.Entity("Core.Entities.FaqCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FaqCategories");
                });

            modelBuilder.Entity("Core.Entities.FaqCategoryLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FaqCategoryID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LangaugeID")
                        .HasColumnType("int");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FaqCategoryID");

                    b.HasIndex("LanguageId");

                    b.ToTable("FaqCategoryLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.FaqLangaugeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FaqID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LangaugeID")
                        .HasColumnType("int");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FaqID");

                    b.HasIndex("LanguageId");

                    b.ToTable("FaqLangaugeItems");
                });

            modelBuilder.Entity("Core.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBaseLanguage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Core.Entities.Many_AdditionalServiceOption_AdditionalServiceInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdditionalServiceInputID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdditionalServiceOptionID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalServiceInputID");

                    b.HasIndex("AdditionalServiceOptionID");

                    b.ToTable("Many_AdditionalServiceOption_AdditionalServiceInputs");
                });

            modelBuilder.Entity("Core.Entities.Many_Blog_RecomendedTour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlogID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogID");

                    b.HasIndex("ProductID");

                    b.ToTable("Many_Blog_RecomendedTour");
                });

            modelBuilder.Entity("Core.Entities.Many_Blog_Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlogID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TagID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogID");

                    b.HasIndex("TagID");

                    b.ToTable("Many_Blog_Tag");
                });

            modelBuilder.Entity("Core.Entities.Many_Product_AdditionalService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdditionalServiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ComissionRateAbility")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiSelect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalServiceID");

                    b.HasIndex("ProductID");

                    b.ToTable("Many_Product_AdditionalService");
                });

            modelBuilder.Entity("Core.Entities.Many_Product_Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TagID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.HasIndex("TagID");

                    b.ToTable("Many_Product_Tag");
                });

            modelBuilder.Entity("Core.Entities.Many_Tour_Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DestinationID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TourID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DestinationID");

                    b.HasIndex("TourID");

                    b.ToTable("Many_Tour_Destination");
                });

            modelBuilder.Entity("Core.Entities.Many_Tour_TourCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TourCategoryID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TourID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TourCategoryID");

                    b.HasIndex("TourID");

                    b.ToTable("Many_Tour_TourCategory");
                });

            modelBuilder.Entity("Core.Entities.Many_TripadvisorComment_TourGuide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TripadvisorCommentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TripadvisorCommentID");

                    b.HasIndex("UserID");

                    b.ToTable("Many_TripadvisorComment_TourGuide");
                });

            modelBuilder.Entity("Core.Entities.PersonPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromPerson")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("ToPerson")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PersonPolicies");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AgentDeposito")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BannerImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CancellationPolicyID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CustomerDeposito")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CutoffHour")
                        .HasColumnType("int");

                    b.Property<bool>("IsChildPolicyActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTour")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinimumPayoutPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentDate")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShowOnHomePage")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TourID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("YoutubeLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CancellationPolicyID");

                    b.HasIndex("ServiceID");

                    b.HasIndex("TourID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Core.Entities.ProductFaq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductFaq");
                });

            modelBuilder.Entity("Core.Entities.ProductFaqLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductFaqID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductFaqID");

                    b.ToTable("ProductFaqLanguageItem");
                });

            modelBuilder.Entity("Core.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("Core.Entities.ProductImageLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductImageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductImageID");

                    b.ToTable("ProductImageLanguageItem");
                });

            modelBuilder.Entity("Core.Entities.ProductLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LangaugeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LangaugeID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductLanguageItem");
                });

            modelBuilder.Entity("Core.Entities.ProductSellLimit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SellLimit")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductSellLimit");
                });

            modelBuilder.Entity("Core.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Core.Entities.ServiceLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LangaugeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LangaugeID");

                    b.HasIndex("ServiceID");

                    b.ToTable("ServiceLanguageItem");
                });

            modelBuilder.Entity("Core.Entities.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Surveies");
                });

            modelBuilder.Entity("Core.Entities.SurveyLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SurveyID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SurveyID");

                    b.ToTable("SurveyLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.SystemOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("SystemOptionCategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SystemOptions");
                });

            modelBuilder.Entity("Core.Entities.SystemOptionLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SystemOptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SystemOptionId");

                    b.ToTable("SystemOptionLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TagCategories")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Core.Entities.TagLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LangaugeID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TagID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TagID");

                    b.ToTable("TagLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ExclusionIDs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InclusionIDs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("IsPerDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsPerPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SegmentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SightToSeeIDs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartCityID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTimeIDs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("SuggestedStartTimeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("Tour");
                });

            modelBuilder.Entity("Core.Entities.TourCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BannerImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TourCategories");
                });

            modelBuilder.Entity("Core.Entities.TourCategoryLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TourCategoryID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TourCategoryID");

                    b.ToTable("TourCategoryLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.TourLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DurationText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LangaugeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TourEndPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TourID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TourStartPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LangaugeID");

                    b.HasIndex("TourID");

                    b.ToTable("TourLanguageItem");
                });

            modelBuilder.Entity("Core.Entities.TourProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("TourID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TourID");

                    b.ToTable("TourProgram");
                });

            modelBuilder.Entity("Core.Entities.TourProgramLanguageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LangaugeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TourProgramID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LangaugeID");

                    b.HasIndex("TourProgramID");

                    b.ToTable("TourProgramLanguageItem");
                });

            modelBuilder.Entity("Core.Entities.TripadvisorComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("TripadvisorComment");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Core.Entities.AdditionalServiceInputLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.AdditionalServiceInput", "AdditionalServiceInput")
                        .WithMany("AdditionalServiceInputLanguageItems")
                        .HasForeignKey("AdditionalServiceInputID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalServiceInput");
                });

            modelBuilder.Entity("Core.Entities.AdditionalServiceLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.AdditionalService", "AdditionalService")
                        .WithMany("AdditionalServiceLanguageItems")
                        .HasForeignKey("AdditionalServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalService");
                });

            modelBuilder.Entity("Core.Entities.AdditionalServiceOption", b =>
                {
                    b.HasOne("Core.Entities.AdditionalService", "AdditionalService")
                        .WithMany("AdditionalServiceOptions")
                        .HasForeignKey("AdditionalServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalService");
                });

            modelBuilder.Entity("Core.Entities.AdditionalServiceOptionLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.AdditionalServiceOption", "AdditionalServiceOption")
                        .WithMany("AdditionalServiceOptionLanguageItems")
                        .HasForeignKey("AdditionalServiceOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalServiceOption");
                });

            modelBuilder.Entity("Core.Entities.AdditionalServiceOptionPrice", b =>
                {
                    b.HasOne("Core.Entities.AdditionalServiceOption", "AdditionalServiceOption")
                        .WithMany("AdditionalServiceOptionPrices")
                        .HasForeignKey("AdditionalServiceOptionID");

                    b.HasOne("Core.Entities.PersonPolicy", "PersonPolicy")
                        .WithMany()
                        .HasForeignKey("PersonPolicyID");

                    b.Navigation("AdditionalServiceOption");

                    b.Navigation("PersonPolicy");
                });

            modelBuilder.Entity("Core.Entities.Blog", b =>
                {
                    b.HasOne("Core.Entities.BlogCategory", "BlogCategory")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogCategory");
                });

            modelBuilder.Entity("Core.Entities.BlogCategoryLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.BlogCategory", "BlogCategory")
                        .WithMany("BlogCategoryLanguageItems")
                        .HasForeignKey("BlogCategoryID");

                    b.HasOne("Core.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LangaugeID");

                    b.Navigation("BlogCategory");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Core.Entities.BlogLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.Blog", "Blog")
                        .WithMany("BlogLanguageItems")
                        .HasForeignKey("BlogID");

                    b.HasOne("Core.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LangaugeID");

                    b.Navigation("Blog");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Core.Entities.CancellationPolicyLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.CancellationPolicy", "CancellationPolicy")
                        .WithMany("CancellationPolicyLanguageItems")
                        .HasForeignKey("CancellationPolicyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancellationPolicy");
                });

            modelBuilder.Entity("Core.Entities.ConstantValueLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.ConstantValue", "ConstantValue")
                        .WithMany("ConstantValueLanguageItems")
                        .HasForeignKey("ConstantValueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConstantValue");
                });

            modelBuilder.Entity("Core.Entities.DestinationLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.Destination", "Destination")
                        .WithMany("DestinationLanguageItems")
                        .HasForeignKey("DestinationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("Core.Entities.Faq", b =>
                {
                    b.HasOne("Core.Entities.FaqCategory", "FaqCategory")
                        .WithMany("Faqs")
                        .HasForeignKey("FaqCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaqCategory");
                });

            modelBuilder.Entity("Core.Entities.FaqCategoryLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.FaqCategory", "FaqCategory")
                        .WithMany("FaqCategoryLanguageItems")
                        .HasForeignKey("FaqCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Language", null)
                        .WithMany("FaqCategoryLanguageItems")
                        .HasForeignKey("LanguageId");

                    b.Navigation("FaqCategory");
                });

            modelBuilder.Entity("Core.Entities.FaqLangaugeItem", b =>
                {
                    b.HasOne("Core.Entities.Faq", "Faq")
                        .WithMany("FaqLangaugeItems")
                        .HasForeignKey("FaqID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Language", null)
                        .WithMany("FaqLangaugeItems")
                        .HasForeignKey("LanguageId");

                    b.Navigation("Faq");
                });

            modelBuilder.Entity("Core.Entities.Many_AdditionalServiceOption_AdditionalServiceInput", b =>
                {
                    b.HasOne("Core.Entities.AdditionalServiceInput", "AdditionalServiceInput")
                        .WithMany("Many_AdditionalServiceOption_AdditionalServiceInputs")
                        .HasForeignKey("AdditionalServiceInputID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.AdditionalServiceOption", "AdditionalServiceOption")
                        .WithMany("Many_AdditionalServiceOption_AdditionalServiceInputs")
                        .HasForeignKey("AdditionalServiceOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalServiceInput");

                    b.Navigation("AdditionalServiceOption");
                });

            modelBuilder.Entity("Core.Entities.Many_Blog_RecomendedTour", b =>
                {
                    b.HasOne("Core.Entities.Blog", "Blog")
                        .WithMany("Many_Blog_RecomendedTours")
                        .HasForeignKey("BlogID");

                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("Many_Blog_RecomendedTours")
                        .HasForeignKey("ProductID");

                    b.Navigation("Blog");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.Many_Blog_Tag", b =>
                {
                    b.HasOne("Core.Entities.Blog", "Blog")
                        .WithMany("Many_Blog_Tags")
                        .HasForeignKey("BlogID");

                    b.HasOne("Core.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Core.Entities.Many_Product_AdditionalService", b =>
                {
                    b.HasOne("Core.Entities.AdditionalService", "AdditionalService")
                        .WithMany("Many_Product_AdditionalServices")
                        .HasForeignKey("AdditionalServiceID");

                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("Many_Product_AdditionalServices")
                        .HasForeignKey("ProductID");

                    b.Navigation("AdditionalService");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.Many_Product_Tag", b =>
                {
                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("Many_Product_Tags")
                        .HasForeignKey("ProductID");

                    b.HasOne("Core.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Core.Entities.Many_Tour_Destination", b =>
                {
                    b.HasOne("Core.Entities.Destination", "Destinations")
                        .WithMany()
                        .HasForeignKey("DestinationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Tour", "Tour")
                        .WithMany("Many_Tour_Destinations")
                        .HasForeignKey("TourID");

                    b.Navigation("Destinations");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Core.Entities.Many_Tour_TourCategory", b =>
                {
                    b.HasOne("Core.Entities.TourCategory", "TourCategory")
                        .WithMany()
                        .HasForeignKey("TourCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Tour", "Tour")
                        .WithMany("Many_Tour_TourCategories")
                        .HasForeignKey("TourID");

                    b.Navigation("Tour");

                    b.Navigation("TourCategory");
                });

            modelBuilder.Entity("Core.Entities.Many_TripadvisorComment_TourGuide", b =>
                {
                    b.HasOne("Core.Entities.TripadvisorComment", "TripadvisorComment")
                        .WithMany("Many_TripadvisorComment_TourGuides")
                        .HasForeignKey("TripadvisorCommentID");

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("Many_TripadvisorComment_TourGuides")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TripadvisorComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.HasOne("Core.Entities.CancellationPolicy", "CancellationPolicy")
                        .WithMany()
                        .HasForeignKey("CancellationPolicyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID");

                    b.HasOne("Core.Entities.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourID");

                    b.Navigation("CancellationPolicy");

                    b.Navigation("Service");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Core.Entities.ProductFaq", b =>
                {
                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("ProductFaqs")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.ProductFaqLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.ProductFaq", "ProductFaq")
                        .WithMany("ProductFaqLanguageItems")
                        .HasForeignKey("ProductFaqID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductFaq");
                });

            modelBuilder.Entity("Core.Entities.ProductImage", b =>
                {
                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.ProductImageLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.ProductImage", "ProductImage")
                        .WithMany("ProductImageLanguageItems")
                        .HasForeignKey("ProductImageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductImage");
                });

            modelBuilder.Entity("Core.Entities.ProductLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LangaugeID");

                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("ProductLanguageItems")
                        .HasForeignKey("ProductID");

                    b.Navigation("Language");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.ProductSellLimit", b =>
                {
                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("ProductSellLimits")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.Service", b =>
                {
                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.ServiceLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LangaugeID");

                    b.HasOne("Core.Entities.Service", "Service")
                        .WithMany("ServiceLanguageItems")
                        .HasForeignKey("ServiceID");

                    b.Navigation("Language");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Core.Entities.SurveyLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.Survey", "Survey")
                        .WithMany("SurveyLanguageItems")
                        .HasForeignKey("SurveyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Core.Entities.SystemOptionLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.SystemOption", "SystemOption")
                        .WithMany("SystemOptionLanguageItems")
                        .HasForeignKey("SystemOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemOption");
                });

            modelBuilder.Entity("Core.Entities.TagLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.Tag", "Tag")
                        .WithMany("TagLanguageItems")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Core.Entities.Tour", b =>
                {
                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.TourCategoryLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.TourCategory", "TourCategory")
                        .WithMany("TourCategoryLanguageItems")
                        .HasForeignKey("TourCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourCategory");
                });

            modelBuilder.Entity("Core.Entities.TourLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LangaugeID");

                    b.HasOne("Core.Entities.Tour", "Tour")
                        .WithMany("TourLanguageItems")
                        .HasForeignKey("TourID");

                    b.Navigation("Language");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Core.Entities.TourProgram", b =>
                {
                    b.HasOne("Core.Entities.Tour", "Tour")
                        .WithMany("TourPrograms")
                        .HasForeignKey("TourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Core.Entities.TourProgramLanguageItem", b =>
                {
                    b.HasOne("Core.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LangaugeID");

                    b.HasOne("Core.Entities.TourProgram", "TourProgram")
                        .WithMany("TourProgramLanguageItems")
                        .HasForeignKey("TourProgramID");

                    b.Navigation("Language");

                    b.Navigation("TourProgram");
                });

            modelBuilder.Entity("Core.Entities.TripadvisorComment", b =>
                {
                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("TripadvisorComments")
                        .HasForeignKey("ProductID");

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("TripadvisorComments")
                        .HasForeignKey("UserID");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.AdditionalService", b =>
                {
                    b.Navigation("AdditionalServiceLanguageItems");

                    b.Navigation("AdditionalServiceOptions");

                    b.Navigation("Many_Product_AdditionalServices");
                });

            modelBuilder.Entity("Core.Entities.AdditionalServiceInput", b =>
                {
                    b.Navigation("AdditionalServiceInputLanguageItems");

                    b.Navigation("Many_AdditionalServiceOption_AdditionalServiceInputs");
                });

            modelBuilder.Entity("Core.Entities.AdditionalServiceOption", b =>
                {
                    b.Navigation("AdditionalServiceOptionLanguageItems");

                    b.Navigation("AdditionalServiceOptionPrices");

                    b.Navigation("Many_AdditionalServiceOption_AdditionalServiceInputs");
                });

            modelBuilder.Entity("Core.Entities.Blog", b =>
                {
                    b.Navigation("BlogLanguageItems");

                    b.Navigation("Many_Blog_RecomendedTours");

                    b.Navigation("Many_Blog_Tags");
                });

            modelBuilder.Entity("Core.Entities.BlogCategory", b =>
                {
                    b.Navigation("BlogCategoryLanguageItems");

                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("Core.Entities.CancellationPolicy", b =>
                {
                    b.Navigation("CancellationPolicyLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.ConstantValue", b =>
                {
                    b.Navigation("ConstantValueLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.Destination", b =>
                {
                    b.Navigation("DestinationLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.Faq", b =>
                {
                    b.Navigation("FaqLangaugeItems");
                });

            modelBuilder.Entity("Core.Entities.FaqCategory", b =>
                {
                    b.Navigation("FaqCategoryLanguageItems");

                    b.Navigation("Faqs");
                });

            modelBuilder.Entity("Core.Entities.Language", b =>
                {
                    b.Navigation("FaqCategoryLanguageItems");

                    b.Navigation("FaqLangaugeItems");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Navigation("Many_Blog_RecomendedTours");

                    b.Navigation("Many_Product_AdditionalServices");

                    b.Navigation("Many_Product_Tags");

                    b.Navigation("ProductFaqs");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductLanguageItems");

                    b.Navigation("ProductSellLimits");

                    b.Navigation("TripadvisorComments");
                });

            modelBuilder.Entity("Core.Entities.ProductFaq", b =>
                {
                    b.Navigation("ProductFaqLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.ProductImage", b =>
                {
                    b.Navigation("ProductImageLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.Service", b =>
                {
                    b.Navigation("ServiceLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.Survey", b =>
                {
                    b.Navigation("SurveyLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.SystemOption", b =>
                {
                    b.Navigation("SystemOptionLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.Tag", b =>
                {
                    b.Navigation("TagLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.Tour", b =>
                {
                    b.Navigation("Many_Tour_Destinations");

                    b.Navigation("Many_Tour_TourCategories");

                    b.Navigation("TourLanguageItems");

                    b.Navigation("TourPrograms");
                });

            modelBuilder.Entity("Core.Entities.TourCategory", b =>
                {
                    b.Navigation("TourCategoryLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.TourProgram", b =>
                {
                    b.Navigation("TourProgramLanguageItems");
                });

            modelBuilder.Entity("Core.Entities.TripadvisorComment", b =>
                {
                    b.Navigation("Many_TripadvisorComment_TourGuides");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("Many_TripadvisorComment_TourGuides");

                    b.Navigation("TripadvisorComments");
                });
#pragma warning restore 612, 618
        }
    }
}
